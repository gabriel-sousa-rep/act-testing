name: Restore Backup Route53 Hosted Zone

on:
  workflow_dispatch:
    inputs:
      BACKUP_FILE:
        description: "Backup file name (ZIP) in S3 bucket"
        required: true
      HOSTED_ZONE_ID:
        description: "Hosted Zone ID for restoration (leave empty to create a new one if it doesn't exist)"
        required: false
        default: ""
      HOSTED_ZONE_NAME:
        description: "Name to create a new Hosted Zone, if it doesn't exist (e.g.: enois.com.br)"
        required: true
        default: "enois.com.br"

jobs:
  restore:
    runs-on: ubuntu-latest
    steps:
      - name: Repository checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Download backup file from S3
        run: |
          echo "Downloading file '${{ github.event.inputs.BACKUP_FILE }}' from bucket '${{ vars.ROUTE53_BACKUP_BUCKET }}'..."
          aws s3 cp s3://${{ vars.ROUTE53_BACKUP_BUCKET }}/${{ github.event.inputs.BACKUP_FILE }} .

      - name: Get password from Secrets Manager
        id: get_password
        run: |
          echo "Retrieving password from Secrets Manager..."
          PASSWORD=enois
          echo "password=$PASSWORD" >> $GITHUB_OUTPUT

      - name: Decompress backup file
        run: |
          echo "Decompressing file ${GITHUB_WORKSPACE}/${{ github.event.inputs.BACKUP_FILE }}..."
          unzip -P "${{ steps.get_password.outputs.password }}" ${{ github.event.inputs.BACKUP_FILE }}

      - name: Check or create Hosted Zone
        id: hosted_zone
        run: |
          if [ -z "${{ github.event.inputs.HOSTED_ZONE_ID }}" ]; then
            echo "No HOSTED_ZONE_ID provided, creating new Hosted Zone..."
            HOSTED_ZONE_ID=$(aws route53 create-hosted-zone --name ${{ github.event.inputs.HOSTED_ZONE_NAME }} --caller-reference $(date +%s) --query 'HostedZone.Id' --output text)
            echo "hosted_zone_id=$HOSTED_ZONE_ID" >> $GITHUB_OUTPUT
            echo "created=true" >> $GITHUB_OUTPUT
          else
            echo "Checking if Hosted Zone '${{ github.event.inputs.HOSTED_ZONE_ID }}' exists..."
            if aws route53 get-hosted-zone --id ${{ github.event.inputs.HOSTED_ZONE_ID }} > /dev/null 2>&1; then
              echo "Hosted Zone found."
              echo "hosted_zone_id=${{ github.event.inputs.HOSTED_ZONE_ID }}" >> $GITHUB_OUTPUT
              echo "created=false" >> $GITHUB_OUTPUT
            else
              echo "Hosted Zone not found, creating new one..."
              HOSTED_ZONE_ID=$(aws route53 create-hosted-zone --name ${{ github.event.inputs.HOSTED_ZONE_NAME }} --caller-reference $(date +%s) --query 'HostedZone.Id' --output text)
              echo "hosted_zone_id=$HOSTED_ZONE_ID" >> $GITHUB_OUTPUT
              echo "created=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Detect OLD_DOMAIN from backup
        id: detect_old_domain
        run: |
          # Uses NS record to identify the domain from backup (points to original zone)
          OLD_DOMAIN=$(jq -r '.ResourceRecordSets[] | select(.Type=="NS") | .Name' records.json | head -n1)
          echo "OLD_DOMAIN=${OLD_DOMAIN}" >> $GITHUB_OUTPUT

      - name: Update records for new Hosted Zone
        if: ${{ steps.hosted_zone.outputs.created == 'true' }}
        run: |
          echo "Updating records to reflect the new domain..."
          OLD_DOMAIN="${{ steps.detect_old_domain.outputs.OLD_DOMAIN }}"
          NEW_DOMAIN="${{ github.event.inputs.HOSTED_ZONE_NAME }}"
          # Ensure NEW_DOMAIN ends with a period
          if [[ "${NEW_DOMAIN}" != *"." ]]; then
            NEW_DOMAIN="${NEW_DOMAIN}."
          fi
          echo "Replacing '$OLD_DOMAIN' with '$NEW_DOMAIN' in records..."
          jq --arg old "$OLD_DOMAIN" --arg new "$NEW_DOMAIN" '(.ResourceRecordSets[] | select(.Name | endswith($old)) | .Name) |= sub($old; $new)' records.json > records_updated.json
          mv records_updated.json records.json

      - name: Prepare change file (Change Batch)
        run: |
          echo "Preparing change file for import..."
          # Remove NS and SOA records, which are created automatically
          jq '{Changes: [.ResourceRecordSets[] | select(.Type != "NS" and .Type != "SOA") | {Action: "UPSERT", ResourceRecordSet: .} ]}' records.json > changes.json

      - name: Import records to Hosted Zone
        run: |
          HOSTED_ZONE_ID=${{ steps.hosted_zone.outputs.hosted_zone_id }}
          echo "Importing records to Hosted Zone $HOSTED_ZONE_ID..."
          aws route53 change-resource-record-sets --hosted-zone-id $HOSTED_ZONE_ID --change-batch file://changes.json

